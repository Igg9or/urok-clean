import re
from math_engine import MathEngine
import random
import math
from sympy import simplify, parse_expr

def simplify_polynomial_answer(answer: str) -> str:
    import re
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Å—Ç–µ–ø–µ–Ω–∏ 0: a^0 ‚Üí –Ω–∏—á–µ–≥–æ
    answer = re.sub(r'([a-zA-Z])\^0', '', answer)
    # a^1 ‚Üí a
    answer = re.sub(r'([a-zA-Z])\^1', r'\1', answer)
    # 1a ‚Üí a (–≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –ø–æ—Å–ª–µ –¥–µ–ª–µ–Ω–∏—è)
    answer = re.sub(r'(?<!\d)1([a-zA-Z])', r'\1', answer)
    # // ‚Üí /
    answer = re.sub(r'//', '/', answer)
    # –õ–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    answer = re.sub(r'\s+', '', answer)
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ç–∏–ø–∞ a/b, —É–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∏—Ç–µ–ª—å/–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å, —Ä–∞–≤–Ω—ã–π 1 (1a/2 ‚Üí a/2, a/1 ‚Üí a)
    answer = re.sub(r'^1([a-zA-Z].*)/(.+)$', r'\1/\2', answer)
    answer = re.sub(r'^(.+)/1$', r'\1', answer)
    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "1" (–µ–¥–∏–Ω–∏—Ü—É)
    return answer if answer else '1'

class TaskGenerator:
    @staticmethod
    def generate_task_variant(template, band: int | None = None):
        if not all(key in template for key in ['question_template', 'answer_template', 'parameters']):
            return None

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–≤—Å–µ–≥–¥–∞ —Å–ª–æ–≤–∞—Ä—å, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π)
        params = {}
        if template.get('parameters'):
            params = MathEngine.generate_parameters(
                template['parameters'],
                template.get('conditions', ''),
                band=band   # üëà –¥–æ–±–∞–≤–ª–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç
            )

        for param, config in template.get('parameters', {}).items():
            if isinstance(config, dict) and config.get('type') == 'expression':
                try:
                    expr = config['value']
                    safe_locals = dict(params)
                    params[param] = eval(expr, {}, safe_locals)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è '{param}': {e}")
                    params[param] = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å (–ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å)
        question = template['question_template']
        if params:
            for param, value in params.items():
                question = re.sub(rf"\{{{param}\}}", str(value), question)

        # –ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        def eval_expr(match):
            expr = match.group(1)
            try:
                # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–µ
                from math import gcd
                def lcm(a, b):
                    return abs(a * b) // gcd(a, b)

                safe_funcs = {
                    'round': round,
                    'abs': abs,
                    'min': min,
                    'max': max,
                    'gcd': gcd,
                    'lcm': lcm,
                    'int': int
                }
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ locals
                local_vars = dict(params)
                # –ï—Å–ª–∏ expr ‚Äî –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ), –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                if expr in local_vars:
                    return str(local_vars[expr])
                # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞—Ä–∏—Ñ–º. –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ round ‚Äî –≤—ã—á–∏—Å–ª—è–µ–º
                if any(op in expr for op in '+-*/') or 'round' in expr or 'abs' in expr or 'min' in expr or 'max' in expr:
                    return str(eval(expr, safe_funcs, local_vars))
                return str(eval(expr, safe_funcs, local_vars))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è '{expr}': {e}")
                return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"

        answer_template = template['answer_template']
        answer = re.sub(r"\{([^{}]+)\}", eval_expr, answer_template)
        try:
            parsed = parse_expr(answer.replace('^', '**'))
            simplified = simplify(parsed)
            answer = str(simplified)
            # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—Ç–µ–ø–µ–Ω–∏ —á–µ—Ä–µ–∑ ^, —Å–¥–µ–ª–∞–π –æ–±—Ä–∞—Ç–Ω–æ –∑–∞–º–µ–Ω—É:
            answer = answer.replace('**', '^')
        except Exception as e:
            print(f"[sympy simplify error]: {e}")
        answer = simplify_polynomial_answer(answer)
        try:
            answer = str(simplify(parse_expr(answer.replace('^', '**')))).replace('**', '^')
        except Exception as e:
            print(f"[sympy final simplify error]: {e}")

        # –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º numeric –æ—Ç–≤–µ—Ç—ã —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π!
        answer_type = template.get('answer_type', 'numeric')
        if answer_type == 'numeric':
            try:
                float_answer = round(float(answer), 6)  # –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤
                # –µ—Å–ª–∏ —Ü–µ–ª–æ–µ ‚Üí —É–±–∏—Ä–∞–µ–º .0
                if float_answer.is_integer():
                    answer = str(int(float_answer))
                else:
                    # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç—Ä–æ–∫—É –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–≤–æ—Å—Ç–æ–≤
                    answer = str(float_answer)
            except Exception:
                pass

                
        return {
            'question': question,
            'correct_answer': answer,
            'params': params,
            'template_id': template.get('id')
        }


    @staticmethod
    def extract_parameters(template_str):
        return list(set(re.findall(r'\{([A-Za-z]+)\}', template_str)))
