console.log('student_lesson.js v5 loaded');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–µ—Ä–µ—Ä–µ—à–∏–≤–∞–Ω–∏—è
let currentRetryTaskCard = null;
let currentRetryTaskId = null;

// ‚úÖ –ö–µ—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π "–†–µ—à–∏—Ç—å –µ—â—ë —Ä–∞–∑": taskId -> { html }
const retryTaskCache = {};

document.addEventListener('DOMContentLoaded', async function() {
    // 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–¥–æ–∂–¥—ë–º—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    await loadSavedAnswers();

    // 2Ô∏è‚É£ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏ —Å–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.task-card').forEach(taskCard => {
        if (taskCard.dataset.retryCompleted === "true" || taskCard.dataset.retryUsed === "true") {
            const retryBtn = taskCard.querySelector('.btn-retry');
            if (retryBtn) {
                retryBtn.disabled = true;
                retryBtn.classList.add('hidden');
            }
        }
    });

    // 3Ô∏è‚É£ –í–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    document.querySelectorAll('.btn-check').forEach(button => {
        button.addEventListener('click', function() {
            checkAnswer(this.closest('.task-card'));
        });
    });

    // 4Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    initRetryModal();

    function extractQuestionForAI(taskCard) {
        const qNode = taskCard.querySelector('.task-question');
        if (!qNode) return '';

        // 1) –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —Å—ã—Ä–æ–π HTML/LaTeX –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
        let raw = qNode.dataset ? qNode.dataset.questionRaw : '';
        if (raw) {
            try { raw = JSON.parse(raw); } catch { /* —É–∂–µ —Å—Ç—Ä–æ–∫–∞ */ }
        } else {
            // 2) –§–æ–ª–ª–±—ç–∫ ‚Äî –±–µ—Ä—ë–º HTML, –∞ –Ω–µ textContent (—Ç–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è–µ–º –¥—Ä–æ–±–∏/—Å—Ç–µ–ø–µ–Ω–∏)
            raw = qNode.innerHTML || '';
        }

        // –õ—ë–≥–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (—á—Ç–æ–±—ã –º–æ–¥–µ–ª—å –≤–∏–¥–µ–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏):
        raw = raw
            .replace(/<br\s*\/?>/gi, '\n')
            .replace(/<sup>(.*?)<\/sup>/gi, '^$1')
            .replace(/&times;|√ó/g, '\\cdot')
            .replace(/&divide;|√∑/g, '\\div');

        return raw.trim();
        }


    
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ—à–∏—Ç—å –µ—â–µ —Ä–∞–∑"
    function showRetryButton(taskCard) {
    // üîí –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –ø–µ—Ä–µ—Ä–µ—à–∞–Ω–æ –∏–ª–∏ retry_used = true
    if (taskCard.dataset.retryCompleted === "true" || taskCard.dataset.retryUsed === "true") {
        const retryBtn = taskCard.querySelector('.btn-retry');
        if (retryBtn) {
            retryBtn.classList.add('hidden');
            retryBtn.disabled = true;
        }
        return;
    }

    const retryButton = taskCard.querySelector('.btn-retry');
    if (retryButton) {
        retryButton.classList.remove('hidden');
        retryButton.disabled = false;
        retryButton.onclick = () => openRetryModal(taskCard);
    }
}

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
async function openRetryModal(taskCard) {

    // üîí –ï—Å–ª–∏ —É–∂–µ –ø–µ—Ä–µ—Ä–µ—à–∏–≤–∞–ª ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä
    if (taskCard.dataset.retryCompleted === "true") {
        alert("–í—ã —É–∂–µ –ø–µ—Ä–µ—Ä–µ—à–∏–≤–∞–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ–ª—å–∑—è.");
        return;
    }

    currentRetryTaskCard = taskCard;
    currentRetryTaskId = taskCard.dataset.taskId;

    const modal = document.getElementById('retryModal');
    const content = modal.querySelector('.retry-task-content');
    const taskId = currentRetryTaskId;

    // ‚úÖ 1) –ï—Å–ª–∏ –µ—Å—Ç—å –≤ –∫–µ—à–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑ –∫–µ—à–∞ –∏ –≤—ã—Ö–æ–¥–∏–º
    if (retryTaskCache[taskId]) {
        content.innerHTML = retryTaskCache[taskId].html;
        modal.classList.remove('hidden');

        // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        const checkBtn = modal.querySelector('.btn-check-retry');
        if (checkBtn) checkBtn.onclick = checkRetryAnswer;

        // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≥–æ–Ω—è–µ–º MathJax –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        if (window.MathJax && typeof MathJax.typesetPromise === 'function') {
            try { await MathJax.typesetPromise([content]); } catch (e) { console.error('MathJax error:', e); }
        }
        return;
    }

    // ‚ùå –í –∫–µ—à–µ –Ω–µ—Ç ‚Äî –≥—Ä—É–∑–∏–º —Å —Å–µ—Ä–≤–µ—Ä–∞
    content.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è...</div>';
    modal.classList.remove('hidden');

    try {
        await loadNewTaskVariant(taskCard, content);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
        content.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è</div>';
    }
}


    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–¥–∞–Ω–∏—è
    async function loadNewTaskVariant(taskCard, contentContainer) {
    const taskId = taskCard.dataset.taskId;
    const userId = taskCard.dataset.userId;

    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è taskId:', taskId);

    if (!taskId) {
        contentContainer.innerHTML = '<div class="error">–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–¥–∞–Ω–∏—è</div>';
        return;
    }

    try {
        const response = await fetch(`/api/generate_retry_task/${taskId}`);
        console.log('Response status:', response.status);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const newTask = await response.json();
        console.log('–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:', newTask);

        if (newTask.error) {
            throw new Error(newTask.error);
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º LaTeX –≤ –≤–æ–ø—Ä–æ—Å–µ
        const normalizedQuestion = normalizeLatexForRetry(newTask.question);

        // ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º HTML
        const html = `
            <div class="retry-task">
                <div class="task-question" id="retry-question">${normalizedQuestion || '–í–æ–ø—Ä–æ—Å –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'}</div>
                <div class="task-answer">
                    <input type="text" class="retry-answer-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç">
                </div>
                <div class="retry-feedback hidden"></div>
                <input type="hidden" class="retry-correct-answer" value="${newTask.correct_answer || ''}">
                <input type="hidden" class="retry-answer-type" value="${taskCard.dataset.answerType || 'numeric'}">
            </div>
        `;

        // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –≤ –∫–µ—à, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        retryTaskCache[taskId] = { html };

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        contentContainer.innerHTML = html;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º MathJax –∫ –Ω–æ–≤–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
        if (window.MathJax && typeof MathJax.typesetPromise === 'function') {
            try {
                await MathJax.typesetPromise([contentContainer]);
                console.log('MathJax applied to retry task');
            } catch (mathError) {
                console.error('MathJax error:', mathError);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–æ–¥–∞–ª–∫–µ
        document.querySelector('.btn-check-retry').onclick = checkRetryAnswer;

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
        contentContainer.innerHTML = `
            <div class="error">
                –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è: ${error.message}
                <br>Task ID: ${taskId}
            </div>
        `;
    }
}


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ LaTeX –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function normalizeLatexForRetry(text) {
    if (!text) return text;
    
    let normalized = String(text);
    
    // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    normalized = normalized.replace(/\\\\\(/g, '\\(').replace(/\\\\\)/g, '\\)');
    normalized = normalized.replace(/\\\\\[/g, '\\[').replace(/\\\\\]/g, '\\]');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å LaTeX
    normalized = normalized.replace(/\\cdot/g, '\\cdot ');
    normalized = normalized.replace(/\\times/g, '\\times ');
    
    return normalized;
}

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    async function checkRetryAnswer() {
        const modal = document.getElementById('retryModal');
        const input = modal.querySelector('.retry-answer-input');
        const feedback = modal.querySelector('.retry-feedback');
        const correctAnswer = modal.querySelector('.retry-correct-answer').value;
        const answerType = modal.querySelector('.retry-answer-type').value;
        const userAnswer = input.value.trim();
        
        if (!userAnswer) {
            alert('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç!');
            return;
        }
        
        try {
            const response = await fetch('/api/check_answer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    answer: userAnswer,
                    correct_answer: correctAnswer,
                    answer_type: answerType
                })
            });
            
            const result = await response.json();
            
            if (result.is_correct) {
                // ‚úÖ –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤–µ—Ä–Ω–æ–µ
                feedback.innerHTML = '<div class="success">–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ó–∞–¥–∞–Ω–∏–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ.</div>';
                feedback.classList.remove('hidden');
                
                // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                input.disabled = true;
                document.querySelector('.btn-check-retry').disabled = true;

                setTimeout(async () => {
                    await saveAnswerToServer(currentRetryTaskId, userAnswer, true, true);

                    // üîí –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –ø–µ—Ä–µ—Ä–µ—à–∞–Ω–Ω–æ–µ (–±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è)
                    currentRetryTaskCard.dataset.retryCompleted = "true";
                    const retryBtn = currentRetryTaskCard.querySelector('.btn-retry');
                    if (retryBtn) {
                        retryBtn.disabled = true;
                        retryBtn.classList.add('hidden');
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                    showResult(currentRetryTaskCard, true, userAnswer);
                    currentRetryTaskCard.querySelector('.answer-input').disabled = true;
                    currentRetryTaskCard.querySelector('.btn-check').disabled = true;

                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    closeRetryModal();
                }, 1500);

            } else {
                // ‚ùå –ï—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                feedback.innerHTML = `
                    <div class="error">
                        –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}
                        <br>–ë–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ—Ä–µ—à–∞—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.
                    </div>
                `;
                feedback.classList.remove('hidden');

                // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏
                input.disabled = true;
                document.querySelector('.btn-check-retry').disabled = true;
                document.querySelector('.btn-cancel').textContent = '–ó–∞–∫—Ä—ã—Ç—å';

                // üîí –¢–∞–∫–∂–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–†–µ—à–∏—Ç—å –µ—â—ë —Ä–∞–∑" –Ω–∞–≤—Å–µ–≥–¥–∞
                currentRetryTaskCard.dataset.retryCompleted = "true";
                const retryBtn = currentRetryTaskCard.querySelector('.btn-retry');
                if (retryBtn) {
                    retryBtn.disabled = true;
                    retryBtn.classList.add('hidden');
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                await saveAnswerToServer(currentRetryTaskId, userAnswer, false, true);

                
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
            feedback.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞</div>';
            feedback.classList.remove('hidden');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    function closeRetryModal() {
    const modal = document.getElementById('retryModal');
    modal.classList.add('hidden');

    // üîπ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    const content = modal.querySelector('.retry-task-content');
    if (content) content.innerHTML = ''; // –æ—á–∏—â–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ

    const checkBtn = modal.querySelector('.btn-check-retry');
    const cancelBtn = modal.querySelector('.btn-cancel');
    if (checkBtn) checkBtn.disabled = false;
    if (cancelBtn) cancelBtn.textContent = '–û—Ç–º–µ–Ω–∞';

    // üîπ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
    currentRetryTaskCard = null;
    currentRetryTaskId = null;
}

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    function initRetryModal() {
        const modal = document.getElementById('retryModal');
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ X
        modal.querySelector('.btn-close').onclick = closeRetryModal;
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –û—Ç–º–µ–Ω–∞
        modal.querySelector('.btn-cancel').onclick = closeRetryModal;
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeRetryModal();
            }
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    async function loadSavedAnswers() {
        const lessonId = window.location.pathname.split('/').pop();
        const firstCard = document.querySelector('.task-card');
        if (!firstCard) return;
        const userId = firstCard.dataset.userId;

        try {
            const response = await fetch(`/get_student_answers/${lessonId}/${userId}`);
            const answers = await response.json();

            answers.forEach(answer => {
                const taskCard = document.querySelector(`.task-card[data-task-id="${answer.task_id}"]`);
                if (taskCard) {
                    const input = taskCard.querySelector('.answer-input');
                    const button = taskCard.querySelector('.btn-check');

                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                    if (answer.answer) {
                        input.value = answer.answer;
                    }

                    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω - –±–ª–æ–∫–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if (answer.is_correct !== null) {
                        input.disabled = true;
                        button.disabled = true;
                        showResult(taskCard, answer.is_correct, answer.answer);
                    }

                    // üîí –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ —É–∂–µ –ø–µ—Ä–µ—Ä–µ—à–∏–≤–∞–ª –∑–∞–¥–∞–Ω–∏–µ ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–†–µ—à–∏—Ç—å –µ—â–µ —Ä–∞–∑"
                    // üîí –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ —É–∂–µ –ø–µ—Ä–µ—Ä–µ—à–∏–≤–∞–ª –∑–∞–¥–∞–Ω–∏–µ ‚Äî –Ω–∞–≤—Å–µ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                    if (answer.retry_used) {
                        taskCard.dataset.retryUsed = "true";
                        taskCard.dataset.retryCompleted = "true";

                        const retryBtn = taskCard.querySelector('.btn-retry');
                        if (retryBtn) {
                            retryBtn.disabled = true;
                            retryBtn.classList.add('hidden');
                        }
                    }
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤:', error);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    async function checkAnswer(taskCard) {
        const taskId = taskCard.dataset.taskId;
        let userAnswer = taskCard.querySelector('.answer-input').value.trim();

// ‚úÖ –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ "‚àö5" ‚Üí "sqrt(5)" –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
userAnswer = userAnswer.replace(/([0-9]*\.?[0-9]*|)\s*‚àö\s*(\(?[a-zA-Z0-9+*/\s-]+\)?)/g, function(_, coeff, radicand) {
    const coefficient = coeff.trim() === '' ? '' : coeff.trim() + '*';
    return coefficient + 'sqrt(' + radicand.trim() + ')';
});
        const correctAnswer = taskCard.dataset.correctAnswer;
        const answerType = taskCard.dataset.answerType || 'numeric';

        // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
        if (typeof taskCard.attempts === "undefined") taskCard.attempts = 0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç
        if (taskCard.querySelector('.answer-input').disabled) {
            return;
        }

        if (!userAnswer) {
            alert('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç!');
            return;
        }

        try {
            const response = await fetch('/api/check_answer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    task_id: taskId,
                    answer: userAnswer,
                    correct_answer: correctAnswer,
                    answer_type: answerType
                })
            });

            const result = await response.json();

            if (result.error) {
                throw new Error(result.error);
            }

            taskCard.attempts += 1; // +1 –ø–æ–ø—ã—Ç–∫–∞

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            showResult(taskCard, result.is_correct, userAnswer);

            if (result.is_correct) {
    // –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª–µ
    taskCard.querySelector('.answer-input').disabled = true;
    taskCard.querySelector('.btn-check').disabled = true;
    await saveAnswerToServer(taskId, userAnswer, true);

} else if (taskCard.attempts >= 1) {
    // –ï—Å–ª–∏ 1 –æ—à–∏–±–∫–∞ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    taskCard.querySelector('.answer-input').disabled = true;
    taskCard.querySelector('.btn-check').disabled = true;
    await saveAnswerToServer(taskId, userAnswer, false);
    const msg = taskCard.querySelector('.feedback-incorrect .error-message');
    if (msg) {
      msg.innerHTML = "–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <span class='correct-answer'>" +
                      correctAnswer + "</span>";
    }

    taskCard.querySelector('.btn-dispute')?.classList.remove('hidden');
    showRetryButton(taskCard);
    fetchAISolution(taskCard);       // –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç –ò–ò

} else {
    // –≠—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è ‚Äî –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—è—è)
    taskCard.attempts += 1;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    const normalizedUser = userAnswer.trim().replace(/\s+/g, '').toLowerCase();
    const normalizedCorrect = correctAnswer.trim().replace(/\s+/g, '').toLowerCase();

    if (normalizedUser === normalizedCorrect) {
        console.log("–û—Ç–≤–µ—Ç —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å—á–∏—Ç–∞–Ω.");
        taskCard.querySelector('.answer-input').disabled = true;
        taskCard.querySelector('.btn-check').disabled = true;
        taskCard.querySelector('.task-feedback .feedback-correct').classList.remove('hidden');
        taskCard.querySelector('.task-feedback .feedback-incorrect').classList.add('hidden');
        taskCard.querySelector('.answer-input').classList.add('correct');
        await saveAnswerToServer(taskId, userAnswer, true);
        return;
    }

    // –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî —Å—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π (–æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞)
    taskCard.querySelector('.task-feedback .feedback-incorrect').classList.remove('hidden');
    taskCard.querySelector('.task-feedback .feedback-correct').classList.add('hidden');
    await saveAnswerToServer(taskId, userAnswer, false);
    showRetryButton(taskCard);
    fetchAISolution(taskCard);
    taskCard.querySelector('.answer-input').disabled = true;
    taskCard.querySelector('.btn-check').disabled = true;
}


        } catch (error) {
            console.error('Error:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    function showResult(taskCard, isCorrect, userAnswer) {
        const feedback = taskCard.querySelector('.task-feedback');
        const correctFeedback = taskCard.querySelector('.feedback-correct');
        const incorrectFeedback = taskCard.querySelector('.feedback-incorrect');
        const status = taskCard.querySelector('.task-status');

        if (isCorrect) {
            correctFeedback.classList.remove('hidden');
            incorrectFeedback.classList.add('hidden');
            status.style.backgroundColor = 'var(--success-color)';
        } else {
            correctFeedback.classList.add('hidden');
            incorrectFeedback.classList.remove('hidden');
            status.style.backgroundColor = 'var(--error-color)';
            
            // –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π/–≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏
            if (taskCard.attempts === 1) {
                incorrectFeedback.querySelector('.error-message').innerHTML = "–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!";
            } else {
                incorrectFeedback.querySelector('.error-message').innerHTML =
                    "–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <span class='correct-answer'>" +
                    taskCard.dataset.correctAnswer +
                    "</span>";
                
                // –ü–û–ö–ê–ó–´–í–ê–ï–ú –ö–ù–û–ü–ö–£ "–†–ï–®–ò–¢–¨ –ï–©–ï –†–ê–ó" –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π –æ—à–∏–±–∫–∏
                showRetryButton(taskCard);
                
                fetchAISolution(taskCard);
            }
        }

        feedback.classList.remove('hidden');
        updateProgress();
    }

    // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async function saveAnswerToServer(taskId, answer, isCorrect, retryUsed = false) {
    try {
        await fetch('/save_answer', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                task_id: taskId,
                answer: answer,
                is_correct: isCorrect,
                retry_used: retryUsed
            })
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
}

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    function updateProgress() {
        const completedTasks = document.querySelectorAll('.task-status[style*="var(--success-color)"]').length;
        const totalTasks = document.querySelectorAll('.task-card').length;
        const percentage = Math.round((completedTasks / totalTasks) * 100);

        document.querySelector('.progress-fill').style.width = `${percentage}%`;
        document.querySelector('.progress-text').textContent =
            `${completedTasks} –∏–∑ ${totalTasks} –∑–∞–¥–∞–Ω–∏–π`;
    }

    let aiStepHistory = [];

    async function startAIStepDialog(taskCard) {
        const aiDialog = taskCard.querySelector('.ai-step-dialog');
        aiDialog.classList.remove('hidden');
        aiDialog.scrollIntoView({ behavior: "smooth", block: "center" });

        const questionText = extractQuestionForAI(taskCard);
        aiStepHistory = [];
        await fetchAndShowAIStep(taskCard, questionText, aiStepHistory);
        aiDialog.querySelector('.btn-exit-ai').onclick = () => aiDialog.classList.add('hidden');
        }


    async function fetchAndShowAIStep(taskCard, questionText, history) {
        const aiDialog = taskCard.querySelector('.ai-step-dialog');
        const userId = taskCard.dataset.userId; // <--- –í–æ—Ç —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
        aiDialog.querySelector('.ai-step-feedback').textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–≥–∞...';

        try {
            const resp = await fetch('/api/ai_step_dialog', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    question: questionText,
                    history: history,
                    user_id: userId // —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!
                })
            });
            const step = await resp.json();
            if (step.error) throw new Error(step.error);
            showAIStep(taskCard, step, questionText, history);
        } catch (e) {
            aiDialog.querySelector('.ai-step-feedback').textContent = "–û—à–∏–±–∫–∞ –ò–ò: " + e.message;
        }
    }

    function showAIStep(taskCard, step, questionText, history) {
        const aiDialog = taskCard.querySelector('.ai-step-dialog');
        aiDialog.querySelector('.ai-step-question').textContent = step.question;
        aiDialog.querySelector('.ai-step-feedback').textContent = '';
        aiDialog.querySelector('.btn-exit-ai').classList.remove('hidden');
        const optionsContainer = aiDialog.querySelector('.ai-step-options');
        optionsContainer.innerHTML = '';

        if (!step.question && (!step.options || step.options.length === 0)) {
            aiDialog.classList.add('hidden');
            return;
        }

        step.options.forEach((opt, idx) => {
            const btn = document.createElement('button');
            btn.textContent = opt;
            btn.onclick = async () => {
                if (idx === step.correct_index) {
                    aiDialog.querySelector('.ai-step-feedback').innerHTML = `<span style="color: #05943b; font-weight:500;">–í–µ—Ä–Ω–æ!</span> ${step.explanation}`;
                    // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    const newHistory = history.concat([{ step, user_choice: idx, correct: true }]);

                    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —É —Å–µ—Ä–≤–µ—Ä–∞:
                    setTimeout(async () => {
                        await fetchAndShowAIStep(taskCard, questionText, newHistory);
                    }, 900);
                } else {
                    aiDialog.querySelector('.ai-step-feedback').innerHTML = `<span style="color: #e31c1c; font-weight:500;">–ù–µ —Å–æ–≤—Å–µ–º!</span> ${step.explanation}`;
                    // –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–æ—Ç –∂–µ —à–∞–≥, –∏–ª–∏ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å –æ—à–∏–±–∫—É, –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —É –±—ç–∫–∞
                }
            };
            optionsContainer.appendChild(btn);
        });
    }

    // === –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø ===
    async function fetchAISolution(taskCard) {
  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ—à–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
  const feedbackBlock = taskCard.querySelector('.task-feedback') || taskCard;
  let solutionNode = feedbackBlock.querySelector('.ai-solution');
  const grade = taskCard.dataset.grade || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  if (!solutionNode) {
    solutionNode = document.createElement('div');
    solutionNode.className = 'ai-solution';
    feedbackBlock.appendChild(solutionNode);
  }
  solutionNode.innerHTML = '<div class="ai-solution-block">–ì–æ—Ç–æ–≤–ª—é —Ä–µ—à–µ–Ω–∏–µ‚Ä¶</div>';

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è LaTeX:
  //  A) [ ... ] —Å LaTeX-–∫–æ–º–∞–Ω–¥–∞–º–∏ -> \( ... \) –∏–ª–∏ \[ ... \]
  //  B) [ 42.52 ] –∏ —Ç.–ø. ¬´—á–∏—Å–ª–æ–≤—ã–µ¬ª -> \( 42.52 \)
  const normalizeLatexBlocks = (input) => {
  if (!input) return input;

  let s = String(input);

  // 1) –ó–∞—â–∏—Ç–∏–º —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∞—Ç–µ–º–∞—Ç–∏–∫—É \( ... \) –∏ \[ ... \]
  const protectedBlocks = [];
  s = s.replace(/\\\(([\s\S]*?)\\\)|\\\[([\s\S]*?)\\\]/g, (m) => {
    const token = `__MJX_PROTECTED_${protectedBlocks.length}__`;
    protectedBlocks.push(m);   // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return token;              // –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä
  });

  // 2) [ ... ] —Å ¬´–ø–æ—Ö–æ–∂–µ–π –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É¬ª –Ω–∞—á–∏–Ω–∫–æ–π ‚Üí \( ... \) –∏–ª–∏ \[ ... \]
  s = s.replace(/\[\s*([\s\S]{1,2000}?)\s*\]/g, (m, inner) => {
    const hasTeX =
      /\\(?:frac|sqrt|sum|int|cdot|times|div|le|ge|neq|approx|bar|overline|underline|vec|hat|pi|alpha|beta|gamma|ldots|mathrm|mathbb|begin|end|boxed)\b/.test(inner) ||
      /[{}^_]/.test(inner);
    const looksNumeric = /^[0-9\s.,+\-*/^=()\\]+$/.test(inner);
    if (!hasTeX && !looksNumeric) return m;

    const isMultilineOrLong = /\n/.test(inner) || inner.length > 80;
    return isMultilineOrLong ? `\[${inner}\]` : `\(${inner}\)`;
  });

  // 3) –û–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ ¬´–≥–æ–ª—ã—Ö¬ª –∫–æ–º–∞–Ω–¥ LaTeX –≤ \( ... \) (–≤–Ω–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∫—É—Å–∫–æ–≤)
  const wrapInline = (text, pattern) => text.replace(pattern, (m) => `\\(${m}\\)`);

  // \frac{...}{...}, \sqrt{...}
  s = wrapInline(s, /\\frac\{[^}]+\}\{[^}]+\}/g);
  s = wrapInline(s, /\\sqrt\{[^}]+\}/g);

  // \times, \div, \cdot
  s = wrapInline(s, /\\times\b/g);
  s = wrapInline(s, /\\div\b/g);
  s = wrapInline(s, /\\cdot\b/g);

  // –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç–µ–ø–µ–Ω–∏ —Ç–∏–ø–∞ 10^2 –∏–ª–∏ (a+b)^3 (–µ—Å–ª–∏ –Ω–µ —É–∂–µ –≤ \( \))
  s = s.replace(/(?<!\\\()(\b[\d()a-zA-Z]+)\s*\^\s*([\-+]?\d+)(?!\\\))/g,
                (m, base, exp) => `\\(${base}^{${exp}}\\)`);

  // 4) –í–µ—Ä–Ω—É—Ç—å –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –∫—É—Å–∫–∏
  s = s.replace(/__MJX_PROTECTED_(\d+)__/g, (_, i) => protectedBlocks[Number(i)]);
    s = s.replace(/\\\\\(/g, '\\(').replace(/\\\\\)/g, '\\)');
  return s;
};

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –±—ç–∫–∞
  const taskId        = taskCard.dataset.taskId;
 const qNode = taskCard.querySelector('.task-question');
const questionText = extractQuestionForAI(taskCard);


  const correctAnswer = taskCard.dataset.correctAnswer || '';
  const userId        = taskCard.dataset.userId || '';

  try {
    const resp = await fetch('/api/ai_full_solution', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        task_id: taskId,
        question: questionText,
        correct_answer: correctAnswer,
        grade: grade,
        user_id: userId
      })
    });

    if (!resp.ok) {
      solutionNode.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è.';
      return;
    }

    const data = await resp.json();
    let raw = data && data.solution ? data.solution : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è.';

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    raw = normalizeLatexBlocks(raw);

    // Markdown ‚Üí HTML
    const html = (window.marked && typeof marked.parse === 'function')
      ? marked.parse(raw)
      : raw.replace(/\n/g, '<br>');

    solutionNode.innerHTML = `
  <div class="ai-solution-block">
    <h4>–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ</h4>
    ${html}
  </div>
`;

    // MathJax —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ—à–µ–Ω–∏—è
    if (window.MathJax && typeof MathJax.typesetPromise === 'function') {
      await MathJax.typesetPromise([solutionNode]);
    }
  } catch (e) {
    console.error('fetchAISolution error:', e);
    solutionNode.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è.';
  }
}

document.querySelectorAll('.btn-dispute').forEach(button => {
    button.addEventListener('click', async function () {
        const taskCard = this.closest('.task-card');
        const studentAnswer = taskCard.querySelector('.answer-input').value.trim();
        const correctAnswer = taskCard.dataset.correctAnswer;
        const taskId = taskCard.dataset.taskId;

        try {
            const resp = await fetch('/dispute_answer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    task_id: taskId,
                    answer: studentAnswer,
                    correct_answer: correctAnswer
                })
            });

            const result = await resp.json();
            if (result.result === 'accepted') {
                alert("–í–∞—à –æ—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!");
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:
                showResult(taskCard, true, studentAnswer);
                taskCard.querySelector('.answer-input').disabled = true;
                taskCard.querySelector('.btn-check').disabled = true;
                taskCard.querySelector('.btn-dispute').classList.add('hidden');
            } else {
                alert("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è.");
            }
        } catch (e) {
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–∏: " + e.message);
        }
    });
});

});


